---
name: Python build

# USE_WORKFLOW
# yamllint disable rule:comments
# yamllint disable-line rule:truthy
on:
  workflow_call:
    inputs:
      python-version:
        type: string
        required: true
        description: "The minimum Python version to support"
      python-versions:
        type: string
        required: true
        description: "The Python versions to test. Usually a list of newer versions we support."
      docker-image-name:
        type: string
        required: false
        description: "Name of the image. Usually it is sensible to set this to the repository name."
        default: ""
      docker-platforms:
        type: string
        required: false
        description: "Platforms to build the docker image for"
        default: "linux/amd64,linux/arm64"
      docker-provenance:
        type: boolean
        required: false
        description: "Enable Docker image provenance"
        default: true
# /USE_WORKFLOW
# USE_REPOSITORY
##
## Global variables from project settings:
##   PYTHON_VERSION: The minimum Python version to support.
##   PYTHON_VERSIONS: The Python versions to test. Usually a list of newer versions we support.
##
#
## yamllint disable-line rule:truthy
#on: pull_request
# /USE_REPOSITORY
# yamllint enable rule:comments

permissions:
  contents: read

jobs:
  build-python:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Set up Python ${{ inputs.python-version }}
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: ${{ inputs.python-version }}
          cache: "pip"
          cache-dependency-path: setup.cfg

      - name: Install dependencies
        run: |
          python -m pip install -e "."

  build-docker:
    if: ${{ inputs.docker-image-name != '' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
      attestations: write
      id-token: write
    outputs:
      image-name: ${{ steps.set-lower-case-image-name.outputs.IMAGE_NAME_LC }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: set lower case image name
        id: set-lower-case-image-name
        run: |
          IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/${{ inputs.docker-image-name }}"
          echo "IMAGE_NAME_LC=${IMAGE_NAME,,}" >> "${GITHUB_ENV}"
          echo "IMAGE_NAME_LC=${IMAGE_NAME,,}" >> "${GITHUB_OUTPUT}"
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Configure Tags
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        id: meta
        with:
          images: ${{ env.IMAGE_NAME_LC }}
          tags: |
            type=ref,event=pr
            type=edge,enable={{is_default_branch}}
            type=raw,value=sha-${{ github.event.pull_request.head.sha }},enable={{is_not_default_branch}}
            type=semver,enable={{is_default_branch}},pattern={{version}}
            type=semver,enable={{is_default_branch}},pattern={{major}}.{{minor}}
            type=semver,enable={{is_default_branch}},pattern={{major}}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
      - name: Build and push Docker image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: ${{ inputs.docker-provenance }}
          platforms: ${{ inputs.docker-platforms }}

  trivy-scan:
    if: ${{ inputs.docker-image-name != '' && github.event_name == 'pull_request' }}
    needs: build-docker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 # 0.33.1
        with:
          image-ref: ${{needs.build-docker.outputs.image-name}}:sha-${{ github.event.pull_request.head.sha }}
          format: "sarif"
          output: "trivy-results.sarif"
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@d3678e237b9c32a6c9bffb3315c335f976f3549f # v3.30.2
        with:
          sarif_file: "trivy-results.sarif"

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - uses: astral-sh/ruff-action@57714a7c8a2e59f32539362ba31877a1957dded1 # v3.5.1
        name: Lint on ${{ inputs.python-version }}
        with:
          args: "check"
          # renovate: datasource=github-releases depName=astral-sh/ruff
          version: "0.8.6"

  test-unit:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJSON(inputs.python-versions) }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: setup.cfg

      - name: Install dependencies
        run: |
          python -m pip install -e ".[test]"

      - name: Test on ${{ matrix.python-version }}
        env:
          # for collecting the tests in pytest. If boto3 is initialized early, the fixture might not have been run and the
          # environment variable is not present
          AWS_DEFAULT_REGION: "eu-central-1"
        run: |
          PYTHONPATH=src \
          pytest -v --doctest-modules --junitxml=junit/test-results.xml --cov-report=xml --cov-report=html \
            tests/unit/

  test-infra:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJSON(inputs.python-versions) }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Run docker-compose
        uses: hoverkraft-tech/compose-action@40041ff1b97dbf152cd2361138c2b03fa29139df # v2.3.0
        with:
          compose-file: "./tests/docker-compose-infra.yml"
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: setup.cfg

      - name: Install dependencies
        run: |
          python -m pip install -e ".[test]"

      - name: Test on ${{ matrix.python-version }}
        env:
          # for collecting the tests in pytest. If boto3 is initialized early, the fixture might not have been run and the
          # environment variable is not present
          AWS_DEFAULT_REGION: "eu-central-1"
        run: |
          PYTHONPATH=src \
          pytest -v --doctest-modules --junitxml=junit/test-results.xml --cov-report=xml --cov-report=html \
            tests/infra/

  test-api:
    runs-on: ubuntu-latest
    needs:
      - build-python
      - build-docker
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Run docker-compose
        uses: hoverkraft-tech/compose-action@40041ff1b97dbf152cd2361138c2b03fa29139df # v2.3.0
        env:
          COMMIT_SHA: ${{ github.event.pull_request.head.sha }}
        with:
          compose-file: "./tests/docker-compose-api.yml"
      - name: Set up Python ${{ inputs.python-version }}
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: ${{ inputs.python-version }}
          cache: "pip"
          cache-dependency-path: setup.cfg

      - name: Install dependencies
        run: |
          python -m pip install -e ".[test]"

      - name: API test environment is Python ${{ inputs.python-version }}
        env:
          # for collecting the tests in pytest. If boto3 is initialized early, the fixture might not have been run and the
          # environment variable is not present
          AWS_DEFAULT_REGION: "eu-central-1"
        run: |
          PYTHONPATH=src pytest -v --doctest-modules --junitxml=junit/test-results.xml --cov-report=xml --cov-report=html tests/api/
